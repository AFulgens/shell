#!/bin/sh

# Based on experience

# exit status-block: [64-79]

SCRIPTPATH="$( cd "$(dirname "${0}")" ; pwd -P )"

# cf. https://www.unicode.org/faq/utf_bom.html#BOM & https://stackoverflow.com/a/71979980/5471574
# hexdump is not in the embedded MinGW for Git for Windows (which is e.g., used in an embedded form Fork)
# thus, we are using sha1sum instead, which must be there, because Git is used that. So it's there, right? â€¦ RIGHT?
has_bom_utf8()  { head -c3 "${1}" | sha1sum | grep -q '57218c316b6921e2cd61027a2387edc31a2d9471' ; } # ef bb bf
has_bom_utf16() { head -c2 "${1}" | sha1sum | grep -qE '(262378002c95ae7e29535cb9f438db219adf98f5|d62636d8caec13f04e28442a0a6fa1afeb024bbb)' ; } # fe ff | ff fe
has_bom_utf32() { head -c4 "${1}" | sha1sum | grep -qE '(20ef1aca4d885435696fbe230a51b94daffd3207|ffa5207277b232210136ddba3b8f2cc9e2229ebd)'; } # 00 00 fe ff | ff fe 00 00

has_fixme() { grep -i "FIXME" "${1}"; }
has_todo()  { grep -i "TODO"  "${1}"; }
has_xxx()   { grep -i "XXX"   "${1}"; }

# Check each file in the commit
git diff --cached --name-status | while read status file; do
	# Git message for a rename will contain the old and the new filename separated by a TAB
	tab=$(printf '\t')
	if [[ ${file} =~ .*${tab}.* ]]; then
		file=($file)
		file=${file[1]}
	fi

	# Reject files with any kind of UTF-BOM
	## Note: check in "reserve" order, because the UTF-16 BOM (LE) is a prefix of the UTF-32 BOM (LE)
	if [[ -z ${COMMIT_ALLOW_UTF32_BOM+x} ]] && has_bom_utf32 "${file}"; then
		sh ${SCRIPTPATH}/reject "UTF-32 BOMs are forbidden, please remove it from ${file}"
		exit 66
	fi
	if [[ -z ${COMMIT_ALLOW_UTF16_BOM+x} ]] && has_bom_utf16 "${file}"; then
		if ! has_bom_utf32 "${file}"; then # either caught already or should be allowed
			sh ${SCRIPTPATH}/reject "UTF-16 BOMs are forbidden, please remove it from ${file}"
			exit 65
		fi
	fi
	if [[ -z ${COMMIT_ALLOW_UTF8_BOM+x} ]] && has_bom_utf8 "${file}"; then
		sh ${SCRIPTPATH}/reject "UTF-8 BOMs are forbidden, please remove it from ${file}"
		exit 64
	fi 

	# Reject files containing widely used task tags
	if [[ -z ${COMMIT_ALLOW_FIXME+x} ]] && has_fixme "${file}"; then
		sh ${SCRIPTPATH}/reject "FIXME tags are forbidden, please remove it from ${file}"
		exit 67
	fi
	if [[ -z ${COMMIT_ALLOW_TODO+x} ]] && has_todo "${file}"; then
		sh ${SCRIPTPATH}/reject "TODO tags are forbidden, please remove it from ${file}"
		exit 68
	fi
	if [[ -z ${COMMIT_ALLOW_XXX+x} ]] && has_xxx "${file}"; then
		sh ${SCRIPTPATH}/reject "XXX tags are forbidden, please remove it from ${file}"
		exit 69 # this is purely by luck, honestly, I didn't even notice until I've written the tests
	fi

	# Reject non-text file (even though there is now Git-LFS, git is not meant for binary files)
	if [[ -z ${COMMIT_ALLOW_BINARY+x} ]] && [[ ! $(file "${file}") =~ .*text.* ]]; then
		sh ${SCRIPTPATH}/reject "Non-text files should not be commited, this file seems to be non-text: ${file}"
		exit 70
	fi
done
